-*- mode: org; fill-column:70 -*-

This is a distribution of Org, a plain text notes and project planning
tool for Emacs.

* Table of contents :TOC:
- [[#updates][Updates]]
- [[#org-modeorg-fold-branch][Org-mode::org-fold branch]]
- [[#testing-the-branch][Testing the branch]]
- [[#installation][Installation]]
  - [[#using-doom-emacs][Using Doom Emacs]]
  - [[#using-straightel][Using Straight.el]]
  - [[#manual-installation][Manual installation]]
  - [[#manual-installation-on-windows-for-people-who-are-not-familiar-with-git][Manual installation on Windows (for people, who are not familiar with git)]]
- [[#contents-of-this-distribution][Contents of this distribution]]
- [[#license][License]]

* Updates

- [2021-04-12 Mon] Original folding mechanism using overlays is now supported as a user customisation; Submitted =org-fold-core= to the mailing list.

  According to earlier discussion in the mailing list, this branch will be available as non-default user option at first. Then, wider auditory can test the new folding mechanism without introducing unexpected breakages for majority of users. I finally back-ported the original folding mechanism. The folding style can be customised using =org-fold-core-style= variable.

  Also, I submitted the =org-fold-core= library for review. It seems that most of the org maintainers have been busy recently, so I am still waiting for the feedback.

- [2021-03-18 Thu] Major improvement in Org mode startup time.

  I managed to track down the bottlenecks during startup in large files. The most time-consuming are font-locking and hiding drawers/blocks (when there are many of such). Font-lock is now postponed until the text to be fontified is unfolded (why does font-lock even fontify hidden text??). org-cycle code is optimised for faster drawer/block folding.

- [2021-03-03 Wed] New default branch: =feature/org-fold-universal-core=

  This is a major rework of the =org-fold= internals. I aimed to make things more modular and easier to maintain. Now, the core org-independent functionality is separated into =org-fold-core= library.
  
- Progress towards merging to master
  - [X] =org-fold-core=
  - [X] Write detailed documentation about internals (in the =.el= file headers)
  - [X] Implement user-level customisation between old and new folding implementations
  - [ ] Cherry-pick unrelated patches and push to master
  - [WAITING] Discuss and finalise folding API in the mailing list
  - [ ] Discuss and finalise the full patch
  - [ ] Merge =isearch.el= patches to Emacs master

* Org-mode::org-fold branch

This branch is a re-implementation of Org-mode folding mechanism. This should help with performance on large files.

The old mechanism is using [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlays.html#Overlays][overlays]], which are implemented with O(n) complexity in Emacs. It means that any attempt to move through hidden text in large org file will require time scaling with the number of drawers/folded subtrees (the problem [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlays.html#Overlays][Emacs manual]] warns about). More details in my old [[https://lists.gnu.org/archive/html/bug-gnu-emacs/2019-04/msg01387.html][bug report]]. For curious, historical reasons why overlays are not efficient can be found [[https://www.jwz.org/doc/lemacs.html][here]].

This branch is hiding text using [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html#Text-Properties][text properties]] instead of overlays. Text properties are much faster (just O(logN)). The effect should be noticeable in org files with more than ~1000 hidden elements (drawers or high-level headlines). More details about this branch development can be found in the Org-mode mailing list discussion thread: https://orgmode.org/list/87h7x9e5jo.fsf@localhost/. If one wants to know even more details, I tried my best to document all the logic in the comments of [[file:./lisp/org-fold.el]].

This repository is aiming to simplify testing of the branch. Feel free to open issues if you find bugs.

 *Important*: I cannot accept all the pull requests to avoid copyright issues. Only people finished FSF copyright assignment can contribute to this branch. See [[https://orgmode.org/contribute.html][Org mode contribution instructions]] for details.
* Testing the branch

An example file demonstrating difference in performance can be found in https://lists.gnu.org/archive/html/bug-gnu-emacs/2019-04/txte6kQp35VOm.txt
The difference is especially striking if one uses older versions of org. Note that the file on mailing list is saved with =txt= extension. One might need to run =M-x org-mode= to activate Org-mode in the downloaded file.

The only visible impact when using the branch should be improved Emacs responsiveness. Everything else should be same with latest Org-mode master branch. If you encounter any anomalies, please report them.

To test the branch with clean Emacs configuration, one can use the following command:

#+begin_src bash
cd /path/to/cloned/org/folder/
emacs -Q -L ./lisp -l org
#+end_src

* Installation

** Using [[https://github.com/hlissner/doom-emacs/][Doom Emacs]]

Adopted from [[https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/org/packages.el][lang/org/packages.el]]. Before doom commit [[https://github.com/hlissner/doom-emacs/commit/cfb8a866dc6181889b0c056abf4fdd3f34fb144b][c8bfbda]] use =:build= instead of =:pre-build=
#+begin_src emacs-lisp
;; ~/.doom.d/packages.el
(package! org-mode
  :recipe (:host github
           :repo "yantar92/org"
           :branch "feature/org-fold-universal-core"
           :files ("*.el" "lisp/*.el" "contrib/lisp/*.el")
           :pre-build (with-temp-file (expand-file-name "org-version.el" (straight--repos-dir "org"))
                        (insert "(fset 'org-release (lambda () \"9.5\"))\n"
                                "(fset 'org-git-version #'ignore)\n"
                                "(provide 'org-version)\n")))
  :shadow 'org)
#+end_src

** Using [[https://github.com/raxod502/straight.el/][Straight.el]]

#+begin_src emacs-lisp
;; Should be placed inside init.el before anything loading org-mode 
(straight-use-package '(org :host github :repo "yantar92/org" :branch "feature/org-fold-universal-core"
			    :files (:defaults "contrib/lisp/*.el")))
#+end_src

** Manual installation

Quoting [[https://orgmode.org/org.html#Installation][original org-mode installation instructions]], but for this repo:

You can clone Org’s repository and install Org like this:

#+begin_src bash
cd ~/src/
git clone https://github.com/yantar92/org
cd org-mode/
make autoloads
#+end_src

Note that in this case, ‘make autoloads’ is mandatory: it defines Org’s version in ‘org-version.el’ and Org’s autoloads in ‘org-loaddefs.el’.

Make sure you set the load path correctly in your Emacs init file:

#+begin_src emacs-lisp
(add-to-list 'load-path "~/path/to/orgdir/lisp")
#+end_src

The repository contains contributed libraries that are not included in Emacs. If you want to use them, add the ‘contrib/’ directory to your load path:

#+begin_src emacs-lisp
(add-to-list 'load-path "~/path/to/orgdir/contrib/lisp" t)
#+end_src

You can also compile with ‘make’, generate the documentation with ‘make doc’, create a local configuration with ‘make config’ and install Org with ‘make install’. Please run ‘make help’ to get the list of compilation/installation options.

For more detailed explanations on Org’s build system, please check the Org Build System page on [[https://orgmode.org/worg/dev/org-build-system.html][Worg]].

** Manual installation on Windows (for people, who are not familiar with git)

- Download the branch (Green "Code" button -> "download ZIP")

- Unpack the downloaded ZIP file

- Find "lisp" folder inside the unpacked "org" folder.  Note the path to the "lisp" folder

- If you don't have init file, create/open it using =C-x C-f ~/.emacs= (or .emacs/init.el if you already have that)

- Add =(setq load-path (append '("the/path/you/just/noted") load-path))= to your Emacs init file (on top of the file). Make sure that the path here has "lisp" folder at the end. Example:

#+begin_src emacs-lisp
(setq load-path (append '("~/Software/emacs/org-feature-org-fold/lisp") load-path))
#+end_src

- Find Find "cintrib/lisp" folder inside the unpacked "org" folder. Note the path.

- Add =(setq load-path (append '("the/path/you/just/noted") load-path))= to your Emacs init file after the previously added line. Example:

#+begin_src emacs-lisp
(setq load-path (append '("~/Software/emacs/org-feature-org-fold/contrib/lisp") load-path))
#+end_src

- Add =(require 'org)= in the next line. At the end, you should have something similar to below:

#+begin_src emacs-lisp
(setq load-path (append '("~/Software/emacs/org-feature-org-fold/lisp") load-path))
(setq load-path (append '("~/Software/emacs/org-feature-org-fold/contrib/lisp") load-path))
(require 'org)
#+end_src

- Save the file =C-x C-s=.

- Reload Emacs

- Try to run `M-x org-version`. The message should contain the path to where you downloaded the org-fold branch. If it does not, feel free to open an issue on Github or drop me an email (see https://github.com/yantar92).

* Contents of this distribution

- README :: This file.

- COPYING :: The GNU General Public License.

- Makefile :: The makefile to compile and install Org.  For
  installation instructions, see the manual or [[https://orgmode.org/worg/dev/org-build-system.html][the more detailed
  procedure on Worg]].
  
- mk/ :: Files needed for building Org.

- lisp/ :: Directory with all the Emacs Lisp files that make up Org.

- doc/ :: The documentation files.  org.texi is the source of the
  documentation, org.html and org.pdf are formatted versions of it.

- etc/ :: Files needed for the ODT exporter.

- testing/ :: Testing suite for Org.

- request-assign-future.txt :: The form that contributors have to sign
  and get processed with the FSF before contributed changes can be
  integrated into the Org core.  All files in this distribution have
  copyright assigned to the FSF.

* Join the GNU Project

Org is part of GNU Emacs.

GNU Emacs is part of the GNU Operating System, developed by the GNU
Project.  To learn more about Free (libre) Software, you can read this
page: https://gnu.org/philosophy/free-sw.html

If you are the author of an awesome program and want to join us in
writing Free (libre) Software, please consider making it an official
GNU program and become a GNU Maintainer.  You can find instructions 
on how to do this here: http://www.gnu.org/help/evaluation

* License

Org-mode is published under [[https://www.gnu.org/licenses/gpl-3.0.html][the GNU GPLv3 license]] or any later
version, the same as GNU Emacs.  See the COPYING file in this
directory.
